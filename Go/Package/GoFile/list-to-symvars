#!/usr/bin/env bash

## Go/Package/GoFile.list-to-symvars
## Read @var: or @const: list file(s), create a symvar for each declaration.

## @var: or @const: files must contain valid golang global declarations
## General syntax:
##      var NAME TYPE = VALUE   -- fully declared, with name, type, value
##      var NAME = VALUE        -- type is inferred from value
##      var NAME TYPE           -- var will be set to the type's 0-value by go
## where NAME and VALUE can be comma-separated lists.
## Declarations can be also be in a global var or const (...) block.

parse_values() {
    local -i num=$1
    local value="$2"
    local -i p=0
    local -i v=0
    local c
    (( num == 1 )) && values[0]="$value" && return
    while (( p < ${#value} )); do
        c=${value:$p:1}
        p+=1
        [[ $c == ',' && -z $INQUOTE ]] && v+=1 && continue
        values[$v]+=$c
        [[ $c != '"' ]] && continue
        if [[ -n $INQUOTE ]]; then INQUOTE= ; else INQUOTE=1; fi
    done
}

parse_declaration() {
    ## Expecting declarations of the form:
    ##      ^(var|const) name[, name2, ...] [type] [= v1[, v2, ...]]
    local declaration="$1" && shift
    local -a dw=( $declaration )
    local -i i j
    local name type value
    ## empty names[] array is declared in caller
    local -a values
    local -A sv

    i=0
    ## var must be the first word in the declaration.
    [[ ${dw[i++]} == $key ]] || return

    ## Declaration may have one name or several names separated by commas.
    while (( i < ${#dw[@]} )); do 
        name=${dw[i++]}
        [[ $name == *, ]] && names+=(${name%,}) && continue
        names+=($name)
        break
    done

    ## Next must be the variable type or '=' and value.
    ## ...
    ## Except for const (...) declarations, which can be name-only, in
    ## which case the previous constant's type and value are applied.
    ## In this case, dw[i] ought to be null, or ${#dw[@]}==$i

    ## Check for name-only entries in const(...) blocks, where type and value
    ## carry-over from the previous constant declaration.
    [[ $name == 'foo' ]] && warn "FOO ($inblock) $line"
    if [[ $key == 'const' ]] && (( inblock>0 )) &&
        [[ ${#dw[@]} == $i || ${dw[$i]} == '//' ]]; then
        (( inblock == 1 )) && {
            warn "Declaration in const(...) has no type or value: <$line>"
            return 1
        }
        type="${prev[type]}"
        for ((i=0; i<${#names[@]}; i++)); do
            values[i]="${prev[value]}"
        done
        inblock+=1
    else
        type=${dw[i++]}
        [[ $type == '=' || ${dw[$i]} == '=' ]] && {
            ## Go will infer the variable type from the value if no type is given.
            parse_values ${#names[@]} "${declaration#*=}"
            [[ ${#values[@]} == ${#names[@]} ]] || {
                warn "number of values (${#values[@]}) must match number of names (${#names[@]})" \
                    "    DECLARATION:$declaration" "    FILE:$file"
                return 1
            }
        }
        [[ $type == '=' ]] && type=
        ## Increment inblock to allow subsequent name-only const(...) entries.
        (( inblock > 0 )) && inblock+=1
    fi
    ## Now we have names, type, and/or values, so should be all set.
    for ((j=0; j<${#names[@]}; j++)); do 
        name="${names[j]}"
        value="${values[j]}"
        if [[ -n $value ]]; then
            ## We have the name and value, may have the type or not.
            if [[ -n $type ]]; then
                sv[name]=$key:$type:$name
                sv[value]="$key $name $type =$value"
            else
                sv[name]=$key:$name
                sv[value]="$key $name =$value"
            fi
        else
            ## We have only the name, no value, so must have the type.
            sv[name]=$key:$type:$name
            sv[value]="$key $name $type"
        fi

        ## Replace names[j] entry with associated symvar name for caller's use:
        names[$j]="${sv[name]}"

        ## Remember type and value in case in a const(...) declaration block.
        prev[type]=$type
        prev[value]=$value

        while [[ -h ${sv[name]} ]]; do
            ## This symvar exists, so check if the value is the same...
            value=$(readlink "${sv[name]}")
            [[ =${sv[value]} == $(readlink "${sv[name]}") ]] &&
                continue 2
            ## Symvar values differ, so add '-' to the name and try again:
            sv[name]+='-'
            names[$j]="${sv[name]}"
        done

        ## Now we have a unique symvar name and value, ready to save.
        symvar "${sv[name]}" "${sv[value]}"
    done
    return
}

readListFile() {
    local key=$1
    local listfile="$2"
    local map="$3"
    local line
    local COMMENTLINE='^[[:blank:]]*//'
    local BLANK='^[[:blank:]]*$'
    local BLOCKSTART='^[[:blank:]]*(const|var)+[[:blank:]]*\($'
    local BLOCKEND='^[[:blank:]]*\)'
    local OPENCURLYBRACKET='^[[:blank:]]*(const|var)[[:blank:]]*{$'
    local -i inblock=0
    local -a names
    local name
    local -A prev

    [[ -n $map ]] && mapfiles[$map]=1
    while IFS= read -r line; do 
        ## skip comments, blank lines, start and end of var(...) block:
        [[ $line =~ $COMMENTLINE ]] && continue
        [[ $line =~ $BLANK ]] && continue
        [[ $line =~ ${BLOCKSTART} ]] && inblock=1 && continue
        [[ $line =~ $BLOCKEND ]] && inblock=0 && continue
        [[ $line =~ $OPENCURLYBRACKET ]] && {
            warn "${0#*lib/} $listfile: unable to handle '$key ... {' declarations"
            return 1
        }
        names=()
        if (( inblock > 0 )); then
            parse_declaration "$key $line" || continue
        else 
            parse_declaration "$line" || continue
        fi

        [[ -n $map ]] || continue
        for name in "${names[@]}"; do
            maps[$map:$name]="$listfile"
        done
    done < "$listfile"
}

main() {
    local -a files=("$@")
    local file
    local -A maps
    local -A mapfiles

    (( $# > 0 )) && {
        ## Process each argument @$key: file (key is var or const).
        ## Don't write symvar names with filenames to %VARS or %CONSTS map.
        for file in "${files[@]}"; do
            key="$file"
            key="${key#@}"
            key="${key%:*}"
            readListFile "$key" "$file" ""
        done
        return
    }

    ## Called with no arguments, process each @var: or @const: file in @ORDER.

    ## @ORDER list file defines the element files for the target program
    while IFS= read -r file; do
        ## parse list file type from name, e.g., @var:x, @const:y, ...
        ## Store symvar names with filenames into %VARS or %CONSTS map.
        key="$file"
        key="${key#@}"
        key="${key%%:*}"
        [[ $file == @$key:* ]] || continue
        [[ $key == 'var' || $key == 'const' ]] || continue
        readListFile "$key" "${file%% *}" "${key^^}S"
    done < @ORDER

    ## Replace %VARS or %CONSTS map file. 
    for key in ${!mapfiles[@]}; do
        [[ -e %$key ]] &&
            rm %$key
    done
    for key in ${!maps[@]}; do
        ## maps[$map:$name]="$listfile", where $map is VARS or CONSTS
        mapfile=%${key%%:*}
        printf "%s\t%s\n" "${key#*:}" "${maps[$key]}" >> "$mapfile"
    done

}

main "$@"

